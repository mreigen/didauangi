/* App Controllers */
function SelectionsCtrl($scope, $http) {
  $scope.maincats = [];
  $scope.districts = [];
  $scope.features = [];
  
  $scope.selectedDistrict = {}
  $scope.selectedSubCats = [];
  $scope.selectedPlaces = [];
  $scope.selectedFeatures = [];
  
  // get all districts
  $http.get('/api/v1/get_districts.json?city_id=ho-chi-minh&fields=id,name,lat,lng,zoom').
  success(function(data) {
    $scope.districts = data;
  });

  // get all main cats
  $http.get('/api/v1/get_maincats.json').
  success(function(data) {
    $scope.maincats = data;
    jQuery.each($scope.maincats, function(i, _maincat) {
      // get all subcats belong to that main cat
      $http.get('/api/v1/get_subcats.json?main_cat_id=' + _maincat["id"]).
      success(function(subcatData) {
        // this is to use with cat-selection's checkboxes ng-model
        subcatData.checked = false;
        _maincat.subcats = subcatData;
        // for tabbable to work with angularjs
        if (_maincat["id"]==1) _maincat.selected = true;
      });
    });
  });
  
  $http.get('api/v1/get_features.json').
  success(function(data) {
    $scope.features = data;
  });
  
  // for tabbable to work with angularjs
  $scope.selectMainCat = function(_maincat) {
    angular.forEach($scope.maincats, function(_maincat) {
      _maincat.selected = false;
    });
    _maincat.selected = true;
  };
  
  var getDistrictById = function(id) {
    var district = jQuery.grep($scope.districts, function(e) {
      return e["id"] == id;
    })[0];
    return district;
  };
  
  $scope.selectDistrict = function() {
    // set 'global' district var
    $scope.selectedDistrict = getDistrictById($scope.selectedDistrictId);
    $scope.loadPosition($scope.selectedDistrict, $scope.selectedSubCats);
  }
  
  $scope.selectSubCat = function(_subcat) {
    if (_subcat.checked == false) {
      // remove subcat from the selected sub cat array
      $scope.selectedSubCats = jQuery.grep($scope.selectedSubCats,
        function(selectedSubCat) {
          return selectedSubCat.id != _subcat.id;
        }
      );
    } else {
      $scope.selectedSubCats.push(_subcat);
    }
    if (jQuery.isEmptyObject($scope.selectedDistrict)) {
      $scope.selectedDistrict = getDistrictById($scope.selectedDistrictId);
    }
    
    $scope.loadPosition($scope.selectedDistrict, $scope.selectedSubCats);
  }
  
  $scope.selectFeature = function(_feature) {
    if (_feature.checked == false) {
      // remove subcat from the selected sub cat array
      $scope.selectedFeatures = jQuery.grep($scope.selectedFeatures,
        function(selectedFeature) {
          return selectedFeature.id != _feature.id;
        }
      );
    } else {
      $scope.selectedFeatures.push(_feature);
    }
    if (jQuery.isEmptyObject($scope.selectedDistrict)) {
      $scope.selectedDistrict = getDistrictById($scope.selectedDistrictId);
    }
    console.log($scope.selectedFeatures);
    $scope.loadPosition($scope.selectedDistrict, $scope.selectedSubCats, $scope.selectedFeatures);
  }
  
  $scope.predecate = function(subcat) {
    return subcat.name;
  }
  
  // features are optional
  $scope.loadPosition = function(district, subcats, features) {
    if (typeof features === "undefined") {
      features = [];
    }
    if ((typeof district === "undefined") || (jQuery.isEmptyObject(district)) || (subcats.length === 0)) {
      MapsCtrl.closeAllInfoWindows();
      MapsCtrl.clearAllMarkers();
      return;
    }
    // get district's info
    var lat = district.lat.toString();
    var lng = district.lng.toString();
    var zoom = district.zoom.toString();
    
    // get places' info
    subcatIds = []
    jQuery.each(subcats, function(index, value) {
      subcatIds.push(subcats[index].id);
    });
    // make it an array with "," as delim
    subcatIds = subcatIds.join(",")
    
    // build get_places url
    var place_url = "/api/v1/get_places.json?district_id=" + district.id + "&sub_cat_ids=" + subcatIds + "&fields=name,address,id,city_id,phone,feature_id";
    
    if (features.length > 0) {
      var featureIds = [];
      jQuery.each(features, function(index, value){
        featureIds.push(features[index].id);
      });
      featureIds = featureIds.join(",");
      if (featureIds.length > 0) {
        place_url += ("&feature_ids=" + featureIds);
      }
    }
    
    $http.get(place_url).
    success(function(placesData) {
      MapsCtrl.clearAllMarkers();
      if (placesData.length === 0) {
        jQuery("#no-result-alert").show();
      } else {
        //jQuery(".alert").alert("close");
        jQuery("#no-result-alert").hide();
        $scope.selectedPlaces = placesData;
        MapsCtrl.loadMap($scope.selectedPlaces, lat, lng, zoom);
      }
    });
  }
};

var buildUrlForApi = function(apiName, options) {
  
};

var toggleFeaturePane = function() {
  event.preventDefault();
  jQuery("#feature-selection").toggle();
  return false;
};


// MAPS CONTROLLER

function MapsCtrl($scope) {
  
  $scope.placesData = [];
  
  MapsCtrl.loadMap = function(placesData, lat, long, zoomLevel) {
    $scope.placesData = placesData;
    
    var mapOptions = {
      //zoom: parseInt(zoomLevel),
      zoom: 14,
      center: new google.maps.LatLng(lat, long),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

    // creating markers
    jQuery.each(placesData, function(index) {
      var iconUrl = 'https://chart.googleapis.com/chart?chst=d_map_pin_letter_withshadow&chld=' + (index + 1) + '|99C7FF|000000';
      placesData[index].iconUrl = iconUrl;
      placesData[index].index = index;
      createMarker(placesData[index], map);
    });
  }

  var infoWindows = [];
  var markerArray = [];

  MapsCtrl.closeAllInfoWindows = function() {
    jQuery.each(infoWindows, function(index, value) {
      infoWindows[index].close();
    });
  }

  MapsCtrl.clearAllMarkers = function() {
    jQuery.each(markerArray, function(index, value) {
      markerArray[index].setMap(null);
      $scope.placesData = [];
    });
  }

  MapsCtrl.setScopePlaceData = function(data) {
    // use $aaply here so that angularjs knows about the changes
    // another frakking angular magic
    $scope.$apply(function() {
      $scope.placeData = data;
    });
  }
  
  $scope.oldIcon = "";
  
  // for onmouseover
  MapsCtrl.highlightMarker = function(index) {
    var marker = findMarkerByIndex(index);
    if (marker) {
      $scope.oldIcon = marker.icon;
      var icon = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.7|0|AA0000|16|b|' + (index + 1) + '&chem=y;s=cm_size;ds=0;dp=1;d=maps_pin,0,10,30,10,8F8,000,rb-0-0&chls=3|3';
      marker.setIcon(icon);
    }
  }
  
  // for onmouseout
  MapsCtrl.unhighlightMarker = function(index) {
    if ($scope.oldIcon === "") {
      return false;
    }
    var marker = findMarkerByIndex(index);
    if (marker) {
      marker.setIcon($scope.oldIcon);
    }
  }
  
  function findMarkerByIndex(index) {
    for (var i=0; i < markerArray.length; i++) {
      if (markerArray[i].data.index === index) {
        return markerArray[i];
      }
    }
    return null;
  }
  
  function createMarker(placeData, map) {
    $scope.placeData = placeData;
    
    var address = placeData.address;
    var placeName = placeData.name;
    var phone = placeData.phone;
    var feature = placeData.feature_id;
    var placeId = placeData.id;
    var iconUrl = placeData.iconUrl;
    
    var contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h2 id="firstHeading" class="firstHeading">'+
        '<a id="' + placeId + '" class="info-title" href="#myModal" data-toggle="modal">'+ placeName + '</a>' + 
        '</h2>'+
        '<div id="bodyContent">'+
        '<p>' + address + '</p>'+
        '<p> Phone: ' + phone+ '</p>'+
        '</div>'+
        '</div>';
    
    var infowindow = new google.maps.InfoWindow({
        content: contentString
    });
    // add to the info window array
    infoWindows.push(infowindow);

    var geocoder = new google.maps.Geocoder();
    var geocoderRequest = { address: address };
    geocoder.geocode(geocoderRequest, function(results, status){
      if (status !== "OK") {
        return false;
      }
      var lat = results[0].geometry.location.ib;
      var lng = results[0].geometry.location.jb;
      placePos = new google.maps.LatLng(lat,lng);
      
      var marker = new google.maps.Marker({
          position: placePos,
          map: map,
          draggable: false,
          title: placeName,
          type: 'point',
          icon: iconUrl,
          data: placeData
      });

      // add to the marker array
      markerArray.push(marker);

      google.maps.event.addListener(marker, 'click', function() {
        // close all the opened info windows
        MapsCtrl.closeAllInfoWindows();
        infowindow.open(map,marker);
        
        MapsCtrl.setScopePlaceData(marker.data);
      });
      
    });
    
    // get place's lat and lng
    /*
    jQuery.ajax({
      type: "get",
      timeout: 1000,
      async: false,
      url: "http://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&sensor=true",
      success: function(data) {
        //console.log(data);
        if (typeof data.results[0] === "undefined") {
          console.log("failed retrieving address:");
          console.log(data.results);
          return;
        }

        var lat = data.results[0].geometry.location.lat;
        var lng = data.results[0].geometry.location.lng;
        placePos = new google.maps.LatLng(lat,lng);
        
        var marker = new google.maps.Marker({
            position: placePos,
            map: map,
            draggable: true,
            title: placeName,
            type: 'point',
            icon: iconUrl,
            data: placeData
        });

        // add to the marker array
        markerArray.push(marker);

        google.maps.event.addListener(marker, 'click', function() {
          // close all the opened info windows
          MapsCtrl.closeAllInfoWindows();
          infowindow.open(map,marker);
          
          setScopePlaceData(marker.data);
        });

      } // success
    });
    */
  }
  
};

//DistrictsCtrl.$inject = ['Districts'];
/*
function GalleriesCtrl(Galleries, Photographers, $routeParams) {
  this.photographer = Photographers.get({ photographer_id: $routeParams.photographer_id });
  this.galleries = Galleries.index({ photographer_id: $routeParams.photographer_id });
}
GalleriesCtrl.$inject = ['Galleries', 'Photographers', '$routeParams'];

function PhotosCtrl(Photos, Galleries, Photographers, SelectedPhotos, $routeParams) {
  var self = this;

  self.photographer = Photographers.get({ photographer_id: $routeParams.photographer_id });
  self.gallery = Galleries.get({ photographer_id: $routeParams.photographer_id, gallery_id: $routeParams.gallery_id });
  self.photos = Photos.index({ photographer_id: $routeParams.photographer_id, gallery_id: $routeParams.gallery_id });
  self.selected_photos = SelectedPhotos.index();


  self.selectPhoto = function(photo) {
    var selected_photo = new SelectedPhotos({ selected_photo: { photo_id: photo.id } });
    selected_photo.$create(function() {
      self.selected_photos.push(selected_photo);
    });
  }

  self.deleteSelectedPhoto = function(selected_photo) {
    angular.Array.remove(self.selected_photos, selected_photo);
    selected_photo.$destroy({ selected_photo_id: selected_photo.id });
  }

  self.saveSelectedPhoto = function(selected_photo) {
    selected_photo.$update({ selected_photo_id: selected_photo.id });
    $('input').blur();
  }

}
PhotosCtrl.$inject = ['Photos', 'Galleries', 'Photographers', 'SelectedPhotos', '$routeParams'];
*/